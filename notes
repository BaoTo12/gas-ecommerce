### The difference between .env and config folder

- Config folder is used for declaring the settings for our application, can store multiple forms like Json, XML
- .env is used to store sensitive information, and declare global environment variables

### MongoDB Update Operators

- $set is used to set values to fields. The key insight with $set is that it handles both existing and non-existing fields gracefully. If the field exists, it overwrites it.

```
await User.updateOne(
  { _id: userId },
  {
    $set: {
      name: 'John',
      'profile.bio': 'Updated bio',  // Notice the dot notation for nested fields
      updatedAt: new Date(),
      status: 'active'
    }
  }
);
```

- $inc is used for for numerical changes and It's atomic. The beauty of $inc is that if the field doesn't exist, MongoDB treats it as zero and then applies the increment.

```
await Post.updateOne(
  { _id: postId },
  {
    $inc: {
      views: 1,           // Increment by 1
      score: 5,           // Add 5 to current score
      downvotes: -1       // Subtract 1 (negative increment)
    }
  }
);
```

#### Array Operations: $push, $addToSet, and $pull

- $push simply appends items to an array.

```
// Basic push - adds one item
await User.updateOne(
  { _id: userId },
  { $push: { tags: 'developer' } }
);

// Push multiple items at once using $each
await User.updateOne(
  { _id: userId },
  { $push: { tags: { $each: ['frontend', 'backend', 'fullstack'] } } }
);

// Push with additional modifiers
await User.updateOne(
  { _id: userId },
  {
    $push: {
      recentActivities: {
        $each: [
          { action: 'login', timestamp: new Date() },
          { action: 'profile_update', timestamp: new Date() }
        ],
        $slice: -10  // Keep only the last 10 activities
      }
    }
  }
);
```

--> $slice modifier is particularly useful - it automatically trims the array to keep only a certain number of elements.

- $addToSet is like a smart version of $push - it only adds items if they're not already present.

```
await User.updateOne(
  { _id: userId },
  { $addToSet: { tags: 'developer' } }  // Only adds if 'developer' isn't already there
);

// Add multiple unique items
await User.updateOne(
  { _id: userId },
  { $addToSet: { skills: { $each: ['JavaScript', 'Node.js', 'JavaScript'] } } }
  // 'JavaScript' will only be added once, even though it appears twice
);
```

- $pull removes all instances of items that match the specified condition

```
// Remove simple values
await User.updateOne(
  { _id: userId },
  { $pull: { tags: 'outdated-tag' } }
);

// Remove using conditions (for arrays of objects)
await User.updateOne(
  { _id: userId },
  {
    $pull: {
      certifications: { year: { $lt: 2020 } }  // Remove certifications older than 2020
    }
  }
);

// Remove multiple values
await User.updateOne(
  { _id: userId },
  { $pull: { tags: { $in: ['old-tag', 'deprecated-tag'] } } }
);
```

### JWT, JWS, JWE

- JWT là một loại của bộ tiêu chuẩn JOSE (JSON Object Signing and Encryption)
- JOSE bao gồm năm tiêu chuẩn chính. 
    + JWS (JSON Web Signature) giúp đảm bảo tính toàn vẹn và xác thực nguồn gốc dữ liệu
    + JWE (JSON Web Encryption) mã hóa dữ liệu để đảm bảo tính bí mật
    + JWK (JSON Web Key) định nghĩa cách biểu diễn khóa mật mã trong JSON
    + JWA (JSON Web Algorithms) liệt kê các thuật toán mật mã được hỗ trợ. 
    + JWT (JSON Web Token) là cách thức cụ thể để sử dụng các tiêu chuẩn trên tạo ra token.

- Hiểu rõ hệ thống phân cấp: JOSE → JWS → JWT:
    JOSE như một "gia đình lớn" của các tiêu chuẩn bảo mật. Trong gia đình này, JWS là một "thành viên" cung cấp chức năng digital signature. Còn JWT là một "ứng dụng cụ thể" của JWS.
    + JOSE (JSON Object Signing and Encryption) is a framework that provides a set of specifications for signing and encrypting data using JSON-based structures. It encompasses several standards like JWS, JWE (JSON Web Encryption), JWK (JSON Web Key), and JWKS (JSON Web Key Set)
    + JWS documentation says is a specification within JOSE that focuses on digitally signing JSON data.
    + JWT is an implementation
- JWT (JSON Web Token) components
    + JOSE Header or JWS Header: Thường bao gồm các thành phần như sau
        alg(algorithm) - Algorithm - JWA (JSON Web Algorithms)
        typ(type) - để xác định đây là JSON Web Token
        kid(keyID) - giúp xác định khóa nào được sử dụng khi có nhiều khóa trong hệ thống
        crit(critical) - liệt kê các extension headers mà bên nhận phải hiểu để xử lý token đúng cách
    + Payload: claims
        subject (chủ thể)
        "iss" (issuer - người phát hành)
        "aud" (audience - đối tượng nhận)
        "exp" (expiration time - thời gian hết hạn)
        "nbf" (not before - không hợp lệ trước thời điểm này)
        "iat" (issued at - thời điểm phát hành)
        "jti" (JWT ID - định danh duy nhất)
    + Signature - JWS Signature
    Ví dụ: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    Phần đầu tiên là JWS Header được encode
    phần thứ hai là JWS Payload được encode,
    phần thứ ba là JWS Signature được encode
    -->  Toàn bộ chuỗi này tuân theo JWS Compact Serialization format.

### Mongoose Middleware
- Def: Middleware in mongoose allows you to execute code at specific points during document operations
- Pre middleware runs before the operation executes
- Post middleware runs after the operation completes successfully
- Document middleware operates on individual documents and includes hooks for save, remove, updateOne, deleteOne, and init
- Query middleware operates on queries themselves and includes hooks for find, findOne, findOneAndUpdate, deleteOne, deleteMany, and others.